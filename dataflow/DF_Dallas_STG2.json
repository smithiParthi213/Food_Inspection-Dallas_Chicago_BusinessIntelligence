{
	"name": "DF_Dallas_STG2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sourceDallasSTG1"
				},
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "DallasSTG2MaxID"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sinkSNF"
				},
				{
					"dataset": {
						"referenceName": "Parquet_ADLS",
						"type": "DatasetReference"
					},
					"name": "sinkADLS"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnViolationArray"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "filterNACols"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "joinMaxID"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     job_id as string (\"SP_001\")",
				"}",
				"source(output(",
				"          RESTAURANT_NAME as string,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          STREET_NUMBER as decimal(38,0),",
				"          STREET_NAME as string,",
				"          STREET_DIRECTION as string,",
				"          STREET_TYPE as string,",
				"          STREET_UNIT as string,",
				"          STREET_ADDRESS as string,",
				"          ZIP_CODE as decimal(38,0),",
				"          VIOLATION_DESCRIPTION_1 as string,",
				"          VIOLATION_POINTS_1 as decimal(38,0),",
				"          VIOLATION_DETAILS_1 as string,",
				"          VIOLATION_MEMO_1 as string,",
				"          VIOLATION_DESCRIPTION_2 as string,",
				"          VIOLATION_POINTS_2 as decimal(38,0),",
				"          VIOLATION_DETAILS_2 as string,",
				"          VIOLATION_MEMO_2 as string,",
				"          VIOLATION_DESCRIPTION_3 as string,",
				"          VIOLATION_POINTS_3 as decimal(38,0),",
				"          VIOLATION_DETAILS_3 as string,",
				"          VIOLATION_MEMO_3 as string,",
				"          VIOLATION_DESCRIPTION_4 as string,",
				"          VIOLATION_POINTS_4 as decimal(38,0),",
				"          VIOLATION_DETAILS_4 as string,",
				"          VIOLATION_MEMO_4 as string,",
				"          VIOLATION_DESCRIPTION_5 as string,",
				"          VIOLATION_POINTS_5 as decimal(38,0),",
				"          VIOLATION_DETAILS_5 as string,",
				"          VIOLATION_MEMO_5 as string,",
				"          VIOLATION_DESCRIPTION_6 as string,",
				"          VIOLATION_POINTS_6 as decimal(38,0),",
				"          VIOLATION_DETAILS_6 as string,",
				"          VIOLATION_MEMO_6 as string,",
				"          VIOLATION_DESCRIPTION_7 as string,",
				"          VIOLATION_POINTS_7 as decimal(38,0),",
				"          VIOLATION_DETAILS_7 as string,",
				"          VIOLATION_MEMO_7 as string,",
				"          VIOLATION_DESCRIPTION_8 as string,",
				"          VIOLATION_POINTS_8 as decimal(38,0),",
				"          VIOLATION_DETAILS_8 as string,",
				"          VIOLATION_MEMO_8 as string,",
				"          VIOLATION_DESCRIPTION_9 as string,",
				"          VIOLATION_POINTS_9 as decimal(38,0),",
				"          VIOLATION_DETAILS_9 as string,",
				"          VIOLATION_MEMO_9 as string,",
				"          VIOLATION_DESCRIPTION_10 as string,",
				"          VIOLATION_POINTS_10 as decimal(38,0),",
				"          VIOLATION_DETAILS_10 as string,",
				"          VIOLATION_MEMO_10 as string,",
				"          VIOLATION_DESCRIPTION_11 as string,",
				"          VIOLATION_POINTS_11 as decimal(38,0),",
				"          VIOLATION_DETAILS_11 as string,",
				"          VIOLATION_MEMO_11 as string,",
				"          VIOLATION_DESCRIPTION_12 as string,",
				"          VIOLATION_POINTS_12 as decimal(38,0),",
				"          VIOLATION_DETAILS_12 as string,",
				"          VIOLATION_MEMO_12 as string,",
				"          VIOLATION_DESCRIPTION_13 as string,",
				"          VIOLATION_POINTS_13 as decimal(38,0),",
				"          VIOLATION_DETAILS_13 as string,",
				"          VIOLATION_MEMO_13 as string,",
				"          VIOLATION_DESCRIPTION_14 as string,",
				"          VIOLATION_POINTS_14 as decimal(38,0),",
				"          VIOLATION_DETAILS_14 as string,",
				"          VIOLATION_MEMO_14 as string,",
				"          VIOLATION_DESCRIPTION_15 as string,",
				"          VIOLATION_POINTS_15 as decimal(38,0),",
				"          VIOLATION_DETAILS_15 as string,",
				"          VIOLATION_MEMO_15 as string,",
				"          VIOLATION_DESCRIPTION_16 as string,",
				"          VIOLATION_POINTS_16 as decimal(38,0),",
				"          VIOLATION_DETAILS_16 as string,",
				"          VIOLATION_MEMO_16 as string,",
				"          VIOLATION_DESCRIPTION_17 as string,",
				"          VIOLATION_POINTS_17 as decimal(38,0),",
				"          VIOLATION_DETAILS_17 as string,",
				"          VIOLATION_MEMO_17 as string,",
				"          VIOLATION_DESCRIPTION_18 as string,",
				"          VIOLATION_POINTS_18 as decimal(38,0),",
				"          VIOLATION_DETAILS_18 as string,",
				"          VIOLATION_MEMO_18 as string,",
				"          VIOLATION_DESCRIPTION_19 as string,",
				"          VIOLATION_POINTS_19 as decimal(38,0),",
				"          VIOLATION_DETAILS_19 as string,",
				"          VIOLATION_MEMO_19 as string,",
				"          VIOLATION_DESCRIPTION_20 as string,",
				"          VIOLATION_POINTS_20 as decimal(38,0),",
				"          VIOLATION_DETAILS_20 as string,",
				"          VIOLATION_MEMO_20 as string,",
				"          VIOLATION_DESCRIPTION_21 as string,",
				"          VIOLATION_POINTS_21 as decimal(38,0),",
				"          VIOLATION_DETAILS_21 as string,",
				"          VIOLATION_MEMO_21 as string,",
				"          VIOLATION_DESCRIPTION_22 as string,",
				"          VIOLATION_POINTS_22 as decimal(38,0),",
				"          VIOLATION_DETAILS_22 as string,",
				"          VIOLATION_MEMO_22 as string,",
				"          VIOLATION_DESCRIPTION_23 as string,",
				"          VIOLATION_POINTS_23 as decimal(38,0),",
				"          VIOLATION_DETAILS_23 as string,",
				"          VIOLATION_MEMO_23 as string,",
				"          VIOLATION_DESCRIPTION_24 as string,",
				"          VIOLATION_POINTS_24 as decimal(38,0),",
				"          VIOLATION_DETAILS_24 as string,",
				"          VIOLATION_MEMO_24 as string,",
				"          VIOLATION_DESCRIPTION_25 as string,",
				"          VIOLATION_POINTS_25 as decimal(38,0),",
				"          VIOLATION_DETAILS_25 as string,",
				"          VIOLATION_MEMO_25 as string,",
				"          INSPECTION_MONTH as string,",
				"          INSPECTION_YEAR as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDallasSTG1",
				"source(output(",
				"          MAX_SK_ID as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(SK_ID),0) as Max_SK_ID from FOOD_INSPECTION_DB.SILVER.DALLAS_FOOD_INSPECTIONS_STG2',",
				"     format: 'query') ~> DallasSTG2MaxID",
				"sourceDallasSTG1 derive(violation_array = array(\r",
				"  array(toString(1), toString(VIOLATION_DESCRIPTION_1), toString(VIOLATION_DETAILS_1), toString(VIOLATION_MEMO_1), toString(VIOLATION_POINTS_1)),\r",
				"  array(toString(2), toString(VIOLATION_DESCRIPTION_2), toString(VIOLATION_DETAILS_2), toString(VIOLATION_MEMO_2), toString(VIOLATION_POINTS_2)),\r",
				"  array(toString(3), toString(VIOLATION_DESCRIPTION_3), toString(VIOLATION_DETAILS_3), toString(VIOLATION_MEMO_3), toString(VIOLATION_POINTS_3)),\r",
				"  array(toString(4), toString(VIOLATION_DESCRIPTION_4), toString(VIOLATION_DETAILS_4), toString(VIOLATION_MEMO_4), toString(VIOLATION_POINTS_4)),\r",
				"  array(toString(5), toString(VIOLATION_DESCRIPTION_5), toString(VIOLATION_DETAILS_5), toString(VIOLATION_MEMO_5), toString(VIOLATION_POINTS_5)),\r",
				"  array(toString(6), toString(VIOLATION_DESCRIPTION_6), toString(VIOLATION_DETAILS_6), toString(VIOLATION_MEMO_6), toString(VIOLATION_POINTS_6)),\r",
				"  array(toString(7), toString(VIOLATION_DESCRIPTION_7), toString(VIOLATION_DETAILS_7), toString(VIOLATION_MEMO_7), toString(VIOLATION_POINTS_7)),\r",
				"  array(toString(8), toString(VIOLATION_DESCRIPTION_8), toString(VIOLATION_DETAILS_8), toString(VIOLATION_MEMO_8), toString(VIOLATION_POINTS_8)),\r",
				"  array(toString(9), toString(VIOLATION_DESCRIPTION_9), toString(VIOLATION_DETAILS_9), toString(VIOLATION_MEMO_9), toString(VIOLATION_POINTS_9)),\r",
				"  array(toString(10), toString(VIOLATION_DESCRIPTION_10), toString(VIOLATION_DETAILS_10), toString(VIOLATION_MEMO_10), toString(VIOLATION_POINTS_10)),\r",
				"  array(toString(11), toString(VIOLATION_DESCRIPTION_11), toString(VIOLATION_DETAILS_11), toString(VIOLATION_MEMO_11), toString(VIOLATION_POINTS_11)),\r",
				"  array(toString(12), toString(VIOLATION_DESCRIPTION_12), toString(VIOLATION_DETAILS_12), toString(VIOLATION_MEMO_12), toString(VIOLATION_POINTS_12)),\r",
				"  array(toString(13), toString(VIOLATION_DESCRIPTION_13), toString(VIOLATION_DETAILS_13), toString(VIOLATION_MEMO_13), toString(VIOLATION_POINTS_13)),\r",
				"  array(toString(14), toString(VIOLATION_DESCRIPTION_14), toString(VIOLATION_DETAILS_14), toString(VIOLATION_MEMO_14), toString(VIOLATION_POINTS_14)),\r",
				"  array(toString(15), toString(VIOLATION_DESCRIPTION_15), toString(VIOLATION_DETAILS_15), toString(VIOLATION_MEMO_15), toString(VIOLATION_POINTS_15)),\r",
				"  array(toString(16), toString(VIOLATION_DESCRIPTION_16), toString(VIOLATION_DETAILS_16), toString(VIOLATION_MEMO_16), toString(VIOLATION_POINTS_16)),\r",
				"  array(toString(17), toString(VIOLATION_DESCRIPTION_17), toString(VIOLATION_DETAILS_17), toString(VIOLATION_MEMO_17), toString(VIOLATION_POINTS_17)),\r",
				"  array(toString(18), toString(VIOLATION_DESCRIPTION_18), toString(VIOLATION_DETAILS_18), toString(VIOLATION_MEMO_18), toString(VIOLATION_POINTS_18)),\r",
				"  array(toString(19), toString(VIOLATION_DESCRIPTION_19), toString(VIOLATION_DETAILS_19), toString(VIOLATION_MEMO_19), toString(VIOLATION_POINTS_19)),\r",
				"  array(toString(20), toString(VIOLATION_DESCRIPTION_20), toString(VIOLATION_DETAILS_20), toString(VIOLATION_MEMO_20), toString(VIOLATION_POINTS_20)),\r",
				"  array(toString(21), toString(VIOLATION_DESCRIPTION_21), toString(VIOLATION_DETAILS_21), toString(VIOLATION_MEMO_21), toString(VIOLATION_POINTS_21)),\r",
				"  array(toString(22), toString(VIOLATION_DESCRIPTION_22), toString(VIOLATION_DETAILS_22), toString(VIOLATION_MEMO_22), toString(VIOLATION_POINTS_22)),\r",
				"  array(toString(23), toString(VIOLATION_DESCRIPTION_23), toString(VIOLATION_DETAILS_23), toString(VIOLATION_MEMO_23), toString(VIOLATION_POINTS_23)),\r",
				"  array(toString(24), toString(VIOLATION_DESCRIPTION_24), toString(VIOLATION_DETAILS_24), toString(VIOLATION_MEMO_24), toString(VIOLATION_POINTS_24)),\r",
				"  array(toString(25), toString(VIOLATION_DESCRIPTION_25), toString(VIOLATION_DETAILS_25), toString(VIOLATION_MEMO_25), toString(VIOLATION_POINTS_25))\r",
				")) ~> derivedColumnViolationArray",
				"flatten1 derive(VIOLATION_NUMBER = toInteger(violation_array[1]),",
				"          VIOLATION_DESCRIPTION = toString(violation_array[2]),",
				"          VIOLATION_DETAILS = toString(violation_array[3]),",
				"          VIOLATION_MEMO = toString(violation_array[4]),",
				"          VIOLATION_POINTS = toInteger(violation_array[5])) ~> derivedColumn2",
				"derivedColumn2 filter(trim(VIOLATION_DESCRIPTION) != 'N/A - Not Applicable') ~> filterNACols",
				"derivedColumnViolationArray foldDown(unroll(violation_array),",
				"     mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"filterNACols keyGenerate(output(my_sk as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey, DallasSTG2MaxID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMaxID",
				"joinMaxID derive(SK_ID = concat('Dallas_', toString(my_sk+MAX_SK_ID)),",
				"          INSPECTION_ID = crc32(concat(  toString(RESTAURANT_NAME),  toString(INSPECTION_DATE),  toString(ZIP_CODE))),",
				"          job_id = $job_id,",
				"          load_dt = currentDate()) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          SK_ID,",
				"          INSPECTION_ID,",
				"          RESTAURANT_NAME,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_DATE,",
				"          INSPECTION_SCORE,",
				"          STREET_NUMBER,",
				"          STREET_NAME,",
				"          STREET_DIRECTION,",
				"          STREET_TYPE,",
				"          STREET_UNIT,",
				"          STREET_ADDRESS,",
				"          ZIP_CODE,",
				"          VIOLATION_NUMBER,",
				"          VIOLATION_DESCRIPTION,",
				"          VIOLATION_DETAILS,",
				"          VIOLATION_MEMO,",
				"          VIOLATION_POINTS,",
				"          INSPECTION_MONTH,",
				"          INSPECTION_YEAR,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          DI_JOB_ID = job_id,",
				"          DI_LOAD_DT = load_dt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SK_ID,",
				"          INSPECTION_ID,",
				"          RESTAURANT_NAME,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_DATE,",
				"          INSPECTION_SCORE,",
				"          STREET_NUMBER,",
				"          STREET_NAME,",
				"          STREET_DIRECTION,",
				"          STREET_TYPE,",
				"          STREET_UNIT,",
				"          STREET_ADDRESS,",
				"          ZIP_CODE,",
				"          VIOLATION_NUMBER,",
				"          VIOLATION_DESCRIPTION,",
				"          VIOLATION_DETAILS,",
				"          VIOLATION_MEMO,",
				"          VIOLATION_POINTS,",
				"          INSPECTION_MONTH,",
				"          INSPECTION_YEAR,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sinkSNF",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkADLS"
			]
		}
	}
}