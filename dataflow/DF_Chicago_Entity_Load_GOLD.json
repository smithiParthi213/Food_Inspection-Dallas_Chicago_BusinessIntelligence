{
	"name": "DF_Chicago_Entity_Load_GOLD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sourceChicago"
				},
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "MaxIDEntityDim"
				},
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sourceEntityDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sinkSnfGold"
				}
			],
			"transformations": [
				{
					"name": "selectColumnsChicago"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "joinSK"
				},
				{
					"name": "derivedCoLS"
				},
				{
					"name": "selectSinkCols"
				},
				{
					"name": "join1"
				},
				{
					"name": "rowAction"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID as string (\"SP_001\")",
				"}",
				"source(output(",
				"          SK_ID as string,",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as double,",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATION_NUMBER as decimal(38,0),",
				"          VIOLATION_DESCRIPTION as string,",
				"          VIOLATION_COMMENTS as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceChicago",
				"source(output(",
				"          MAX_ID_SK as decimal(30,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(ENTITY_SK),0) as  MAX_ID_SK from FOOD_INSPECTION_DB.GOLD.DIM_ENTITY',",
				"     format: 'query') ~> MaxIDEntityDim",
				"source(output(",
				"          ENTITY_SK as decimal(30,0),",
				"          ENTITY_DK as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          ENTITY_TYPE as string,",
				"          LICENSE_NUMBER as string,",
				"          STREET_ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP_CODE as decimal(38,0),",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          EFFECTIVE_START_DATE as date,",
				"          EFFECTIVE_END_DATE as date,",
				"          IS_ACTIVE as decimal(38,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceEntityDim",
				"sourceChicago select(mapColumn(",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          LICENSE_NUMBER,",
				"          ENTITY_TYPE = FACILITY_TYPE,",
				"          STREET_ADDRESS = ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP_CODE = ZIP,",
				"          LATITUDE,",
				"          LONGITUDE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsChicago",
				"aggregate1 keyGenerate(output(my_sk as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey, MaxIDEntityDim join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSK",
				"rowAction derive(ENTITY_SK = my_sk + MAX_ID_SK,",
				"          ENTITY_DK = iif(row_action == 'insert', concat('Chicago_DBA', toString(my_sk+ MAX_ID_SK)), ENTITY_DK),",
				"          EFFECTIVE_START_DATE = currentDate(),",
				"          EFFECTIVE_END_DATE = iif(row_action == 'update', currentDate(), toDate('9999-12-31')),",
				"          IS_ACTIVE = iif(row_action == 'update', '0', '1'),",
				"          DI_JOB_ID = $JOB_ID,",
				"          DI_LOAD_DT = currentDate()) ~> derivedCoLS",
				"derivedCoLS select(mapColumn(",
				"          DBA_NAME = aggregate1@DBA_NAME,",
				"          AKA_NAME,",
				"          LICENSE_NUMBER,",
				"          ENTITY_TYPE,",
				"          STREET_ADDRESS = aggregate1@STREET_ADDRESS,",
				"          CITY = aggregate1@CITY,",
				"          STATE = aggregate1@STATE,",
				"          ZIP_CODE = aggregate1@ZIP_CODE,",
				"          LATITUDE = aggregate1@LATITUDE,",
				"          LONGITUDE = aggregate1@LONGITUDE,",
				"          ENTITY_SK,",
				"          ENTITY_DK,",
				"          EFFECTIVE_START_DATE,",
				"          EFFECTIVE_END_DATE,",
				"          IS_ACTIVE,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSinkCols",
				"joinSK, sourceEntityDim join(aggregate1@DBA_NAME == sourceEntityDim@DBA_NAME",
				"     && aggregate1@STREET_ADDRESS == sourceEntityDim@STREET_ADDRESS",
				"     && aggregate1@ZIP_CODE == sourceEntityDim@ZIP_CODE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(row_action = iif(!isNull(ENTITY_DK) && IS_ACTIVE == 1 && aggregate1@DBA_NAME != sourceEntityDim@DBA_NAME, 'update', 'insert')\r",
				") ~> rowAction",
				"selectColumnsChicago aggregate(groupBy(DBA_NAME,",
				"          AKA_NAME,",
				"          LICENSE_NUMBER,",
				"          ENTITY_TYPE,",
				"          STREET_ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP_CODE,",
				"          LATITUDE,",
				"          LONGITUDE),",
				"     row_count = count()) ~> aggregate1",
				"selectSinkCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sinkSnfGold"
			]
		}
	}
}