{
	"name": "DF_Dallas_Entity_Load_GOLD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sourceDallasSTG2"
				},
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "MaxIDEntityDIM"
				},
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sourceEntityDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sinkSnfGold"
				}
			],
			"transformations": [
				{
					"name": "selectReqCols"
				},
				{
					"name": "derivedCols"
				},
				{
					"name": "selectSINKCols"
				},
				{
					"name": "aggregateCols"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "joinSK"
				},
				{
					"name": "rowAction"
				},
				{
					"name": "joinDimEntity"
				}
			],
			"scriptLines": [
				"parameters{",
				"     job_id as string (\"SP_001\")",
				"}",
				"source(output(",
				"          SK_ID as string,",
				"          INSPECTION_ID as decimal(38,0),",
				"          RESTAURANT_NAME as string,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          STREET_NUMBER as decimal(38,0),",
				"          STREET_NAME as string,",
				"          STREET_DIRECTION as string,",
				"          STREET_TYPE as string,",
				"          STREET_UNIT as string,",
				"          STREET_ADDRESS as string,",
				"          ZIP_CODE as integer,",
				"          VIOLATION_NUMBER as decimal(38,0),",
				"          VIOLATION_DESCRIPTION as string,",
				"          VIOLATION_POINTS as decimal(38,0),",
				"          VIOLATION_DETAILS as string,",
				"          VIOLATION_MEMO as string,",
				"          INSPECTION_MONTH as string,",
				"          INSPECTION_YEAR as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDallasSTG2",
				"source(output(",
				"          MAX_ENTITYSK as decimal(30,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(ENTITY_SK),0) as Max_EntitySK from FOOD_INSPECTION_DB.GOLD.DIM_ENTITY',",
				"     format: 'query') ~> MaxIDEntityDIM",
				"source(output(",
				"          ENTITY_SK as integer,",
				"          ENTITY_DK as integer,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          ENTITY_TYPE as string,",
				"          LICENSE_NUMBER as string,",
				"          STREET_ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP_CODE as integer,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          EFFECTIVE_START_DATE as date,",
				"          EFFECTIVE_END_DATE as date,",
				"          IS_ACTIVE as integer,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceEntityDim",
				"sourceDallasSTG2 select(mapColumn(",
				"          DBA_NAME = RESTAURANT_NAME,",
				"          STREET_ADDRESS,",
				"          ZIP_CODE,",
				"          LATITUDE,",
				"          LONGITUDE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqCols",
				"rowAction derive(ENTITY_SK = my_sk + MAX_ENTITYSK,",
				"          ENTITY_DK = iif(row_action == 'insert', concat('Dallas_DBA', toString(my_sk+MAX_ENTITYSK)), ENTITY_DK)\r",
				",",
				"          AKA_NAME = 'N/A - Not Applicable for Dallas',",
				"          LICENSE_NUMBER = 'N/A - Not Applicable for Dallas',",
				"          STATE = 'Texas',",
				"          CITY = 'Dallas',",
				"          ENTITY_TYPE = 'Restaurant',",
				"          di_job_id = $job_id,",
				"          di_load_dt = currentDate(),",
				"          EFFECTIVE_START_DATE = ERROR_FUNCTION(''),",
				"          EFFECTIVE_END_DATE = ERROR_FUNCTION(''),",
				"          IS_ACTIVE = ERROR_FUNCTION('')) ~> derivedCols",
				"derivedCols select(mapColumn(",
				"          ENTITY_SK,",
				"          DBA_NAME = aggregateCols@DBA_NAME,",
				"          AKA_NAME,",
				"          ENTITY_TYPE,",
				"          LICENSE_NUMBER,",
				"          STREET_ADDRESS = aggregateCols@STREET_ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP_CODE = aggregateCols@ZIP_CODE,",
				"          LATITUDE = aggregateCols@LATITUDE,",
				"          LONGITUDE = aggregateCols@LONGITUDE,",
				"          DI_JOB_ID = derivedCols@di_job_id,",
				"          DI_LOAD_DT = derivedCols@di_load_dt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSINKCols",
				"selectReqCols aggregate(groupBy(DBA_NAME,",
				"          STREET_ADDRESS,",
				"          ZIP_CODE,",
				"          LATITUDE,",
				"          LONGITUDE),",
				"     row_count = count()) ~> aggregateCols",
				"aggregateCols keyGenerate(output(my_sk as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey, MaxIDEntityDIM join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSK",
				"joinDimEntity derive(row_action = iif(!isNull(ENTITY_DK) && IS_ACTIVE == 1 && aggregateCols@DBA_NAME != sourceEntityDim@DBA_NAME, 'update', 'insert')) ~> rowAction",
				"joinSK, sourceEntityDim join(aggregateCols@DBA_NAME == sourceEntityDim@DBA_NAME",
				"     && aggregateCols@STREET_ADDRESS == sourceEntityDim@STREET_ADDRESS",
				"     && aggregateCols@ZIP_CODE == sourceEntityDim@ZIP_CODE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimEntity",
				"selectSINKCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          ENTITY_SK,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          ENTITY_TYPE,",
				"          LICENSE_NUMBER,",
				"          STREET_ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP_CODE,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sinkSnfGold"
			]
		}
	}
}