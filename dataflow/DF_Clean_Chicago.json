{
	"name": "DF_Clean_Chicago",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "SourceSILVER"
				},
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "MaxIDChicagoStg2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snowflake",
						"type": "DatasetReference"
					},
					"name": "sinkSNF"
				},
				{
					"dataset": {
						"referenceName": "Parquet_ADLS",
						"type": "DatasetReference"
					},
					"name": "sinkADLS"
				}
			],
			"transformations": [
				{
					"name": "splitViolation"
				},
				{
					"name": "splitColumns"
				},
				{
					"name": "TrimViolation"
				},
				{
					"name": "splitToColumns"
				},
				{
					"name": "CleanVIOLATION"
				},
				{
					"name": "TrimQuotes"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join1"
				},
				{
					"name": "SkCreation"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JOB_ID as string (\"Dale_06\")",
				"}",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as double,",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as timestamp,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          LOCATION as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> SourceSILVER",
				"source(output(",
				"          MAX_SK_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(SK_ID),0) as Max_SK_ID from FOOD_INSPECTION_DB.SILVER.CHICAGO_FOOD_INSPECTIONS_STG2',",
				"     format: 'query') ~> MaxIDChicagoStg2",
				"splitColumns foldDown(unroll(SplitRows),",
				"     mapColumn(",
				"          INSPECTION_ID,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          LICENSE_NUMBER,",
				"          FACILITY_TYPE,",
				"          RISK,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          RESULTS,",
				"          VIOLATIONS = SplitRows,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          LOCATION,",
				"          ZIP",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> splitViolation",
				"TrimQuotes derive(SplitRows = split(trim(VIOLATIONS), '|')\r",
				") ~> splitColumns",
				"splitViolation derive(VIOLATIONS = trim(VIOLATIONS)) ~> TrimViolation",
				"TrimViolation derive(ViolationNumber = iif(regexMatch(VIOLATIONS, '^\\\\s*\\\\d+\\\\.'), toInteger(regexExtract(VIOLATIONS, '^\\\\s*(\\\\d+)\\\\.', 1)), -1)\r",
				",",
				"          ViolationDescription = iif(\r",
				"  regexMatch(VIOLATIONS, '^\\\\s*\\\\d+\\\\.\\\\s*(.+?)\\\\s*-\\\\s+Comments:'),\r",
				"  trim(regexExtract(VIOLATIONS, '^\\\\s*\\\\d+\\\\.\\\\s*(.+?)\\\\s*-\\\\s+Comments:', 1)),\r",
				"  'N/A'\r",
				"),",
				"          ViolationComments = iif(regexMatch(VIOLATIONS, '-\\\\s+Comments:\\\\s*(.+)$'),trim(regexExtract(VIOLATIONS, '-\\\\s+Comments:\\\\s*(.+)$', 1)),   'N/A' ),",
				"          DI_JOB_ID = $DI_JOB_ID,",
				"          DI_LOAD_DT = currentDate()) ~> splitToColumns",
				"SourceSILVER derive(VIOLATIONS = iif(VIOLATIONS == 'Unknown', 'N/A', VIOLATIONS)) ~> CleanVIOLATION",
				"CleanVIOLATION derive(VIOLATIONS = regexReplace(VIOLATIONS, '^\\\"|\\\"$', '')\r",
				") ~> TrimQuotes",
				"splitToColumns keyGenerate(output(my_sk as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1, MaxIDChicagoStg2 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(SK_ID = concat('Chicago_', toString(my_sk+MAX_SK_ID))\r",
				",",
				"          INSPECTION_DATE = toDate(INSPECTION_DATE),",
				"          job_id = $DI_JOB_ID,",
				"          load_date = currentDate()) ~> SkCreation",
				"SkCreation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SK_ID,",
				"          INSPECTION_ID,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          LICENSE_NUMBER,",
				"          FACILITY_TYPE,",
				"          RISK,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          RESULTS,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          VIOLATION_NUMBER = ViolationNumber,",
				"          VIOLATION_DESCRIPTION = ViolationDescription,",
				"          VIOLATION_COMMENTS = ViolationComments,",
				"          DI_JOB_ID = job_id,",
				"          DI_LOAD_DT = load_date",
				"     )) ~> sinkSNF",
				"SkCreation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkADLS"
			]
		}
	}
}